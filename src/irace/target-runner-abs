#!/usr/bin/perl -w
use strict;
use warnings FATAL => 'all';
use diagnostics;
use File::Temp qw/ tempdir /;
sub max ($$) { $_[$_[0] < $_[1]] }
use Cwd 'abs_path';
use File::Basename;
my $bindir = dirname(abs_path($0));

my $debug = 0;

my $mincycle = 60;
my $maxcycle = 120;
my $minphase = 15;
my $minoffset = -30;
my $maxoffset = 30;
my $pedestrian = 4;
my $fixedphase = 4;

# When called with a single argument, generate parameters
if (@ARGV == 1) {
    generate_parameters($ARGV[0]);
    exit 0;
}
###############################################################################
# This script is the command that is executed every run.
# Check the examples in examples/
#
# This script is run in the execution directory (execDir, --exec-dir).
#
# PARAMETERS:
# $1 is the candidate configuration number
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run
#
# RETURN VALUE:
# This script should print one numerical value: the cost that must be minimized.
# Exit with 0 if no error, with 1 in case of error
###############################################################################
my $EXE = abs_path("$bindir/../sumo-wrapper/code/sumo-wrapper");
my $FIXED_PARAMS="";

my $CANDIDATE = shift @ARGV;
my $INSTANCEID = shift @ARGV;
my $SEED = shift @ARGV;
$SEED = 0; # We use always zero to match Javier's GA
my $INSTANCE = shift @ARGV;
my $ROUFILE = shift @ARGV;
die "${INSTANCE}: No such file or directory" unless (-s "${INSTANCE}");

my $pwd=`pwd`;
my $STDOUT="c${CANDIDATE}-${INSTANCEID}.stdout";
my $STDERR="c${CANDIDATE}-${INSTANCEID}.stderr";

my $sumcycle = 0;
my $solution = "";
my $ncycles = 1;
my $fixedtime = 0;
my $offset;
my $first = 0;
for (my $i = 0; $i <= @ARGV; $i++) {
    my $value;
    if ($i < @ARGV and ($ARGV[$i] ne '-o')) {
        # FIXME: We could use or check these values.
        if ($ARGV[$i] eq '-maxcycle' or $ARGV[$i] eq '-mincycle'
            or $ARGV[$i] eq '-minphase') {
            $i++;
        }
        if ($ARGV[$i] eq '-c') {
            $fixedtime += $ARGV[++$i];
        } 
        if ($ARGV[$i] ne '-p') {
            $sumcycle += $ARGV[$i];
        }
        next;
    }
    if ($first > 0) {
        # Finish previous cycle
        my $sumcycle2 = 0;
        for (my $j = $first; $j < $i; $j++) {
            my $op = $ARGV[$j];
            $value = $ARGV[++$j];
            if ($op eq '-p') {
                die "found $op $value but expecting -p\n" unless ($op eq '-p');
                ## This is done by the repair function of irace.
                # if ($sumcycle > $maxcycle) {
                #     $value = int(0.5 + 
                #                  (($value * ($sumcycle - $fixedtime)) 
                #                   / ($maxcycle - $fixedtime)));
                #     die "$value ($ARGV[$j]) fixedtime = $fixedtime < $minphase\n" if ($value < $minphase);
                # }
            } else {
                die "found $op but expecting -c\n" unless ($op eq '-c');
            }
            $sumcycle2 += $value;
            $solution .= "$value ";
            warn "$ncycles: $op = $value ($ARGV[$j]) fixedtime = $fixedtime, sumcycle = $sumcycle2" if ($debug);
        }
        die "$ncycles: -o $offset: found $sumcycle2 > $maxcycle \n" if ($sumcycle2 > $maxcycle);
        die "$ncycles: -o $offset: found $sumcycle2 < $mincycle \n" if ($sumcycle2 < $mincycle);
    }
    if ($i == @ARGV) { # No more cycles
        last;
    }
    $value = $ARGV[++$i];
    $offset = $value;
    $first = ++$i;
    $sumcycle = 0;
    $fixedtime = 0;
    $solution .= "$value ";
    warn "$ncycles: offset = $value" if ($debug);
    $ncycles++;
}

my $OUTDIR = tempdir( CLEANUP => 1 );
open my $solfh, '>', "${OUTDIR}/solution" or die "solution: $!\n";
print $solfh $solution . "\n";
close $solfh;

# If the program just prints a number, we can use 'exec' to avoid
# creating another process, but there can be no other commands after exec.
#exec $EXE ${FIXED_PARAMS} -i $INSTANCE ${CAND_PARAMS}
# exit 1
# 
# Otherwise, save the output to a file, and parse the result from it.
# (If you wish to ignore segmentation faults you can use '{}' around
# the command.)
`cat ${OUTDIR}/solution > $STDERR`;
`echo $EXE ${FIXED_PARAMS} $INSTANCE ${OUTDIR}/solution $STDOUT $SEED $OUTDIR $ROUFILE >> $STDERR`;
#`source ~/.profile; echo \$(ldd -v $EXE) \$(hostname) \$LD_LIBRARY_PATH >> ${STDERR}`;
`$EXE ${FIXED_PARAMS} $INSTANCE ${OUTDIR}/solution $STDOUT $SEED $OUTDIR $ROUFILE >> ${STDERR} 2>&1`;

# This is an example of reading a number from the output.
# It assumes that the objective value is the first number in
# the first column of the only line starting with a digit.
sleep 1 unless (-s "${STDOUT}");

if ( -s "${STDOUT}") {
    print `grep '// Fitness' ${STDOUT} | cut -f1 -d ' '`;
    unlink "${STDOUT}", "${STDERR}";
    exit 0;
} else {
    open FILE, "${STDERR}" or die "Couldn't open ${STDERR}: $!"; 
    my $string = join("\n", <FILE>); 
    close FILE;
    die "${STDOUT}: No such file or directory\n${STDERR}:\n$string";
}
exit 0;

sub generate_parameters {
        my $filename = shift;
        my @lines = `cat $filename`;

        my $ncycles = 0;
        my $ktlogics = 0;
        my $kphases = 0;
        my $lower;
        my $upper;

        print <<EOF;
# Types of variables:
# o  -o    offset
# p  -p    phase given in seconds; check > $minphase; check 
#          [$mincycle, $maxcycle]
# c  -c    constant time in seconds; either a pedestrian phase 
#          ($pedestrian seconds per lane) or a yellow phase; 
#          do not check minimum
EOF
my $ntlogics;
while (@lines) {
    my $line = shift @lines;
    if ($line =~ /^(\d+)$/) {
        $ntlogics = 0 + $1; last;
    }
}
my $nphases = 0 + shift @lines;

        # First print some constants:
        print "maxcycle \"-maxcycle \" c ($maxcycle)\n";
        print "mincycle \"-mincycle \" c ($mincycle)\n";
        print "minphase \"-minphase \" c ($minphase)\n";
        
LINE: foreach my $line (@lines) {
    if ($line =~ /^([^\s]+)\s+(?:[-.\d]+)?\s+(?:[-.\d]+)?\s+([\d]+)\s+((?:[a-zA-Z]\s*)+)$/) {
        $ktlogics++;
        my $id = $1;
        my $num = $2;
        my @phases = split(/\s+/, $3);
        die "couldn't match $num phases in $line\n" if (@phases != $num);

        $ncycles++;
        if ($minoffset == $maxoffset) {
            print "o${ktlogics} \"-o \" c ($minoffset) # $ncycles: $id $num\n";
        } else {
            print "o${ktlogics} \"-o \" i ($minoffset, $maxoffset) # $ncycles: $id $num\n";
        }
        # Count fixed time phases
        my $fixedtotaltime = 0;
        my $pedestrian_time = 0;
        my $nfixed = 0;
        for (my $i = 0; $i < $num; $i++) {
            if (index($phases[$i], 'y') >= 0
                and $phases[$i] =~ /[Ggr]/) {
                $nfixed++;
                $fixedtotaltime += $fixedphase;
                $debug and warn " $id $num $phases[$i] fixedtotaltime = $fixedtotaltime (fixed phase)\n";
            } elsif ($phases[$i] =~ /^y+$/) {
                $nfixed++;
                my $lanes = length($phases[$i]);
                $pedestrian_time = $lanes * $pedestrian;
                $fixedtotaltime += $pedestrian_time;
                $debug and warn " $id $num $phases[$i] fixedtotaltime = $fixedtotaltime, pedestrian = $pedestrian_time\n";
            } else {
                $fixedtotaltime += $minphase;
                $debug and warn " $id $num $phases[$i] fixedtotaltime = $fixedtotaltime, pedestrian = $pedestrian_time\n";
            }
        }
        my $nnotfixed = $num - $nfixed;

        if ($nnotfixed == 1) {
            $lower = max ($mincycle - $pedestrian_time, $minphase);
            $upper = max ($maxcycle - $pedestrian_time, $lower + 1);
            for (my $i = 0; $i < $num; $i++) {
                $kphases++;
                if ($phases[$i] =~ /^y+$/) {
                    print "c_${ktlogics}_${i} \"-c \" c ($pedestrian_time)";
                } else {
                    print "p_${ktlogics}_${i} \"-p \" i ($lower, $upper)";
                }
                print " # $id $num $phases[$i] (pedestrian cross)\n";
            }
            next LINE;
        }
        $debug and warn "fixedtotaltime = $fixedtotaltime\n";
        my $plower = $minphase;
        my $pupper = $maxcycle - ($fixedtotaltime - $minphase);
        die "$plower >= $pupper ($maxcycle - ($fixedtotaltime - $minphase))\n" unless ($plower < $pupper);

        for (my $i = 0; $i < $num; $i++) {
            $kphases++;
            if (index($phases[$i], 'y') >= 0 and
                $phases[$i] =~ /[Ggr]/) {
                print "c_${ktlogics}_${i} \"-c \" c (4) # $id $num $phases[$i]\n";
            } elsif ($phases[$i] =~ /^y+$/) {
                print "c_${ktlogics}_${i} \"-c \" c ($pedestrian_time) # $id $num $phases[$i] (pedestrian cross)\n";
            } else {
                print "p_${ktlogics}_${i} \"-p \" i ($plower,$pupper) # $id $num $phases[$i]\n";
            }
        }
    }
}

die "mismatch of tlogics read ($ktlogics) and number of tlogics specified in the third line ($ntlogics)\n" if ($ktlogics != $ntlogics);
die "mismatch of phases read ($kphases) and number of phases specified in the fourth line ($nphases)\n" if ($kphases != $nphases);
    }
